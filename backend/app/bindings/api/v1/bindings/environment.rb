=begin
#OpenStax Kinetic API

#The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Api::V1::Bindings
  class Environment
    attr_accessor :user

    attr_accessor :accounts_env_name

    attr_accessor :homepage_url

    # The tags of the study object, used for grouping and filtering.
    attr_accessor :rewards_schedule

    # Banners that should be displayed to the user
    attr_accessor :banners_schedule

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user' => :'user',
        :'accounts_env_name' => :'accounts_env_name',
        :'homepage_url' => :'homepage_url',
        :'rewards_schedule' => :'rewards_schedule',
        :'banners_schedule' => :'banners_schedule'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user' => :'EnvironmentUser',
        :'accounts_env_name' => :'String',
        :'homepage_url' => :'String',
        :'rewards_schedule' => :'Array<RewardsScheduleSegment>',
        :'banners_schedule' => :'Array<BannerMessage>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Api::V1::Bindings::Environment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Api::V1::Bindings::Environment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'accounts_env_name')
        self.accounts_env_name = attributes[:'accounts_env_name']
      end

      if attributes.key?(:'homepage_url')
        self.homepage_url = attributes[:'homepage_url']
      end

      if attributes.key?(:'rewards_schedule')
        if (value = attributes[:'rewards_schedule']).is_a?(Array)
          self.rewards_schedule = value
        end
      end

      if attributes.key?(:'banners_schedule')
        if (value = attributes[:'banners_schedule']).is_a?(Array)
          self.banners_schedule = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @user.nil?
        invalid_properties.push('invalid value for "user", user cannot be nil.')
      end

      if @accounts_env_name.nil?
        invalid_properties.push('invalid value for "accounts_env_name", accounts_env_name cannot be nil.')
      end

      if @homepage_url.nil?
        invalid_properties.push('invalid value for "homepage_url", homepage_url cannot be nil.')
      end

      if @rewards_schedule.nil?
        invalid_properties.push('invalid value for "rewards_schedule", rewards_schedule cannot be nil.')
      end

      if @banners_schedule.nil?
        invalid_properties.push('invalid value for "banners_schedule", banners_schedule cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @user.nil?
      return false if @accounts_env_name.nil?
      return false if @homepage_url.nil?
      return false if @rewards_schedule.nil?
      return false if @banners_schedule.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] rewards_schedule Value to be assigned
    def rewards_schedule=(rewards_schedule)
      if rewards_schedule.nil?
        fail ArgumentError, 'rewards_schedule cannot be nil'
      end

      @rewards_schedule = rewards_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] banners_schedule Value to be assigned
    def banners_schedule=(banners_schedule)
      if banners_schedule.nil?
        fail ArgumentError, 'banners_schedule cannot be nil'
      end

      @banners_schedule = banners_schedule
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user == o.user &&
          accounts_env_name == o.accounts_env_name &&
          homepage_url == o.homepage_url &&
          rewards_schedule == o.rewards_schedule &&
          banners_schedule == o.banners_schedule
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user, accounts_env_name, homepage_url, rewards_schedule, banners_schedule].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Api::V1::Bindings.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
