=begin
#OpenStax Kinetic API

#The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Api::V1::Bindings
  class Stage
    # The study ID.
    attr_accessor :id

    # An integer that describes the sort order for this stage
    attr_accessor :order

    # The name of the stage
    attr_accessor :title

    # The longer description shown to participants
    attr_accessor :description

    # How many days after previous stage will this become available
    attr_accessor :available_after_days

    # Has the stage been launched
    attr_accessor :is_completed

    # Can the stage be launched
    attr_accessor :is_launchable

    # The configuration for a particular kind of stage, e.g. Qualtrics.  See `QualtricsStage`
    attr_accessor :config

    # How many points the stage is worth
    attr_accessor :points

    # How long the stage is (in minutes)
    attr_accessor :duration_minutes

    # When the stage opens for participation; null means not open.
    attr_accessor :opens_at

    # When the stage closes for participation; null means does not close.
    attr_accessor :closes_at

    # Feedback types for this stage
    attr_accessor :feedback_types

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'order' => :'order',
        :'title' => :'title',
        :'description' => :'description',
        :'available_after_days' => :'available_after_days',
        :'is_completed' => :'is_completed',
        :'is_launchable' => :'is_launchable',
        :'config' => :'config',
        :'points' => :'points',
        :'duration_minutes' => :'duration_minutes',
        :'opens_at' => :'opens_at',
        :'closes_at' => :'closes_at',
        :'feedback_types' => :'feedback_types'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'order' => :'Integer',
        :'title' => :'String',
        :'description' => :'String',
        :'available_after_days' => :'Float',
        :'is_completed' => :'Boolean',
        :'is_launchable' => :'Boolean',
        :'config' => :'Object',
        :'points' => :'Float',
        :'duration_minutes' => :'Float',
        :'opens_at' => :'Time',
        :'closes_at' => :'Time',
        :'feedback_types' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'opens_at',
        :'closes_at',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Api::V1::Bindings::Stage` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Api::V1::Bindings::Stage`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'available_after_days')
        self.available_after_days = attributes[:'available_after_days']
      end

      if attributes.key?(:'is_completed')
        self.is_completed = attributes[:'is_completed']
      end

      if attributes.key?(:'is_launchable')
        self.is_launchable = attributes[:'is_launchable']
      end

      if attributes.key?(:'config')
        self.config = attributes[:'config']
      end

      if attributes.key?(:'points')
        self.points = attributes[:'points']
      end

      if attributes.key?(:'duration_minutes')
        self.duration_minutes = attributes[:'duration_minutes']
      end

      if attributes.key?(:'opens_at')
        self.opens_at = attributes[:'opens_at']
      end

      if attributes.key?(:'closes_at')
        self.closes_at = attributes[:'closes_at']
      end

      if attributes.key?(:'feedback_types')
        if (value = attributes[:'feedback_types']).is_a?(Array)
          self.feedback_types = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @order.nil?
        invalid_properties.push('invalid value for "order", order cannot be nil.')
      end

      if @config.nil?
        invalid_properties.push('invalid value for "config", config cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @order.nil?
      return false if @config.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] feedback_types Value to be assigned
    def feedback_types=(feedback_types)
      @feedback_types = feedback_types
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          order == o.order &&
          title == o.title &&
          description == o.description &&
          available_after_days == o.available_after_days &&
          is_completed == o.is_completed &&
          is_launchable == o.is_launchable &&
          config == o.config &&
          points == o.points &&
          duration_minutes == o.duration_minutes &&
          opens_at == o.opens_at &&
          closes_at == o.closes_at &&
          feedback_types == o.feedback_types
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, order, title, description, available_after_days, is_completed, is_launchable, config, points, duration_minutes, opens_at, closes_at, feedback_types].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Api::V1::Bindings.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
