=begin
#OpenStax Kinetic API

#The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module Api::V1::Bindings
  class ParticipantStudy
    # The study ID.
    attr_accessor :id

    # The study title that participants see.
    attr_accessor :title

    # The shorty study description that participants see.
    attr_accessor :short_description

    # The long study description that participants see.
    attr_accessor :long_description

    # The tags of the study object, used for grouping and filtering.
    attr_accessor :tags

    # Description of feedback displayed to the user upon study completion
    attr_accessor :feedback_description

    # Freeform id of image that should be displayed on study card
    attr_accessor :image_id

    # Description of how the study benefits participants
    attr_accessor :benefits

    # The expected study duration in minutes.
    attr_accessor :duration_minutes

    # How many points will be awarded for participation in the study
    attr_accessor :participation_points

    # How popular the study is on a fractional scale of 0.0 to 1.0
    attr_accessor :popularity_rating

    # When the study was launched; null means not launched
    attr_accessor :first_launched_at

    # When the study was completed; null means not completed.
    attr_accessor :completed_at

    # When the study ends; null means open indefinitely.
    attr_accessor :closes_at

    # When the study was opted-out of; null means not opted out.
    attr_accessor :opted_out_at

    # The study's researchers.
    attr_accessor :researchers

    # The study's stages.
    attr_accessor :stages

    # Mandatory studies must be completed by all users
    attr_accessor :is_mandatory

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'title' => :'title',
        :'short_description' => :'short_description',
        :'long_description' => :'long_description',
        :'tags' => :'tags',
        :'feedback_description' => :'feedback_description',
        :'image_id' => :'image_id',
        :'benefits' => :'benefits',
        :'duration_minutes' => :'duration_minutes',
        :'participation_points' => :'participation_points',
        :'popularity_rating' => :'popularity_rating',
        :'first_launched_at' => :'first_launched_at',
        :'completed_at' => :'completed_at',
        :'closes_at' => :'closes_at',
        :'opted_out_at' => :'opted_out_at',
        :'researchers' => :'researchers',
        :'stages' => :'stages',
        :'is_mandatory' => :'is_mandatory'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'title' => :'String',
        :'short_description' => :'String',
        :'long_description' => :'String',
        :'tags' => :'Array<String>',
        :'feedback_description' => :'String',
        :'image_id' => :'String',
        :'benefits' => :'String',
        :'duration_minutes' => :'Integer',
        :'participation_points' => :'Float',
        :'popularity_rating' => :'Float',
        :'first_launched_at' => :'Time',
        :'completed_at' => :'Time',
        :'closes_at' => :'Time',
        :'opted_out_at' => :'Time',
        :'researchers' => :'Array<PublicResearcher>',
        :'stages' => :'Array<ParticipantStudyStage>',
        :'is_mandatory' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Api::V1::Bindings::ParticipantStudy` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Api::V1::Bindings::ParticipantStudy`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'feedback_description')
        self.feedback_description = attributes[:'feedback_description']
      end

      if attributes.key?(:'image_id')
        self.image_id = attributes[:'image_id']
      end

      if attributes.key?(:'benefits')
        self.benefits = attributes[:'benefits']
      end

      if attributes.key?(:'duration_minutes')
        self.duration_minutes = attributes[:'duration_minutes']
      end

      if attributes.key?(:'participation_points')
        self.participation_points = attributes[:'participation_points']
      end

      if attributes.key?(:'popularity_rating')
        self.popularity_rating = attributes[:'popularity_rating']
      end

      if attributes.key?(:'first_launched_at')
        self.first_launched_at = attributes[:'first_launched_at']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'closes_at')
        self.closes_at = attributes[:'closes_at']
      end

      if attributes.key?(:'opted_out_at')
        self.opted_out_at = attributes[:'opted_out_at']
      end

      if attributes.key?(:'researchers')
        if (value = attributes[:'researchers']).is_a?(Array)
          self.researchers = value
        end
      end

      if attributes.key?(:'stages')
        if (value = attributes[:'stages']).is_a?(Array)
          self.stages = value
        end
      end

      if attributes.key?(:'is_mandatory')
        self.is_mandatory = attributes[:'is_mandatory']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @short_description.nil?
        invalid_properties.push('invalid value for "short_description", short_description cannot be nil.')
      end

      if @tags.nil?
        invalid_properties.push('invalid value for "tags", tags cannot be nil.')
      end

      if @duration_minutes.nil?
        invalid_properties.push('invalid value for "duration_minutes", duration_minutes cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @title.nil?
      return false if @short_description.nil?
      return false if @tags.nil?
      return false if @duration_minutes.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          title == o.title &&
          short_description == o.short_description &&
          long_description == o.long_description &&
          tags == o.tags &&
          feedback_description == o.feedback_description &&
          image_id == o.image_id &&
          benefits == o.benefits &&
          duration_minutes == o.duration_minutes &&
          participation_points == o.participation_points &&
          popularity_rating == o.popularity_rating &&
          first_launched_at == o.first_launched_at &&
          completed_at == o.completed_at &&
          closes_at == o.closes_at &&
          opted_out_at == o.opted_out_at &&
          researchers == o.researchers &&
          stages == o.stages &&
          is_mandatory == o.is_mandatory
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, title, short_description, long_description, tags, feedback_description, image_id, benefits, duration_minutes, participation_points, popularity_rating, first_launched_at, completed_at, closes_at, opted_out_at, researchers, stages, is_mandatory].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Api::V1::Bindings.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
