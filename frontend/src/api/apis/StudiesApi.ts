/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax Kinetic API
 * The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AddResearcherToStudyRequest {
    UNKNOWN_PARAMETER_NAME: ;
    UNKNOWN_PARAMETER_NAME2: ;
}

export interface AddStageRequest {
    UNKNOWN_PARAMETER_NAME: ;
}

export interface DeleteStageRequest {
    UNKNOWN_PARAMETER_NAME: ;
}

export interface DeleteStudyRequest {
    UNKNOWN_PARAMETER_NAME: ;
}

export interface GetParticipantStudyRequest {
    UNKNOWN_PARAMETER_NAME: ;
}

export interface GetStageRequest {
    UNKNOWN_PARAMETER_NAME: ;
}

export interface LandStudyRequest {
    UNKNOWN_PARAMETER_NAME: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
}

export interface LaunchStudyRequest {
    UNKNOWN_PARAMETER_NAME: ;
    UNKNOWN_PARAMETER_NAME2?: ;
}

export interface RemoveResearcherFromStudyRequest {
    UNKNOWN_PARAMETER_NAME: ;
    UNKNOWN_PARAMETER_NAME2: ;
}

export interface UpdateStageRequest {
    UNKNOWN_PARAMETER_NAME: ;
}

export interface UpdateStudyRequest {
    UNKNOWN_PARAMETER_NAME: ;
}

/**
 * 
 */
export class StudiesApi extends runtime.BaseAPI {

    /**
     * Add a researcher to a study
     * Add a researcher to a study
     */
    async addResearcherToStudyRaw(requestParameters: AddResearcherToStudyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling addResearcherToStudy.');
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 === null || requestParameters.UNKNOWN_PARAMETER_NAME2 === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME2','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME2 was null or undefined when calling addResearcherToStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{study_id}/researcher/{user_id}`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a researcher to a study
     * Add a researcher to a study
     */
    async addResearcherToStudy(requestParameters: AddResearcherToStudyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addResearcherToStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Add a stage to study
     * Add a stage to a study
     */
    async addStageRaw(requestParameters: AddStageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling addStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{id}/stages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a stage to study
     * Add a stage to a study
     */
    async addStage(requestParameters: AddStageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addStageRaw(requestParameters, initOverrides);
    }

    /**
     * Add a study
     * Add a study
     */
    async addStudyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a study
     * Add a study
     */
    async addStudy(initOverrides?: RequestInit): Promise<void> {
        await this.addStudyRaw(initOverrides);
    }

    /**
     * Delete a stage
     * Delete a stage
     */
    async deleteStageRaw(requestParameters: DeleteStageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling deleteStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a stage
     * Delete a stage
     */
    async deleteStage(requestParameters: DeleteStageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteStageRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a study.  Cannot remove a study that has `first_lauched_at` set.
     * Deletes an unlaunched study
     */
    async deleteStudyRaw(requestParameters: DeleteStudyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling deleteStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{study_id}`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a study.  Cannot remove a study that has `first_lauched_at` set.
     * Deletes an unlaunched study
     */
    async deleteStudy(requestParameters: DeleteStudyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies (available and completed) for the participant
     */
    async getParticipantStudiesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies (available and completed) for the participant
     */
    async getParticipantStudies(initOverrides?: RequestInit): Promise<void> {
        await this.getParticipantStudiesRaw(initOverrides);
    }

    /**
     * Get participant-visible info for a study
     * Get participant-visible info for a study
     */
    async getParticipantStudyRaw(requestParameters: GetParticipantStudyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getParticipantStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get participant-visible info for a study
     * Get participant-visible info for a study
     */
    async getParticipantStudy(requestParameters: GetParticipantStudyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getParticipantStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Get a stage
     * Get a stage
     */
    async getStageRaw(requestParameters: GetStageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling getStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a stage
     * Get a stage
     */
    async getStage(requestParameters: GetStageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.getStageRaw(requestParameters, initOverrides);
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies for the calling researcher
     */
    async getStudiesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies for the calling researcher
     */
    async getStudies(initOverrides?: RequestInit): Promise<void> {
        await this.getStudiesRaw(initOverrides);
    }

    /**
     * Land a study stage
     * Land a study stage
     */
    async landStudyRaw(requestParameters: LandStudyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling landStudy.');
        }

        const queryParameters: any = {};

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 !== undefined) {
            queryParameters['aborted'] = requestParameters.UNKNOWN_PARAMETER_NAME2;
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME3 !== undefined) {
            queryParameters['consent'] = requestParameters.UNKNOWN_PARAMETER_NAME3;
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME4 !== undefined) {
            queryParameters['md'] = requestParameters.UNKNOWN_PARAMETER_NAME4;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies/{id}/land`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Land a study stage
     * Land a study stage
     */
    async landStudy(requestParameters: LandStudyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.landStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Launch the next available study stage
     * Launch the next available study stage
     */
    async launchStudyRaw(requestParameters: LaunchStudyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling launchStudy.');
        }

        const queryParameters: any = {};

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 !== undefined) {
            queryParameters['preview'] = requestParameters.UNKNOWN_PARAMETER_NAME2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies/{id}/launch`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Launch the next available study stage
     * Launch the next available study stage
     */
    async launchStudy(requestParameters: LaunchStudyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.launchStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a researcher from a study.  Cannot remove the last researcher.
     * Remove a researcher from a study
     */
    async removeResearcherFromStudyRaw(requestParameters: RemoveResearcherFromStudyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling removeResearcherFromStudy.');
        }

        if (requestParameters.UNKNOWN_PARAMETER_NAME2 === null || requestParameters.UNKNOWN_PARAMETER_NAME2 === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME2','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME2 was null or undefined when calling removeResearcherFromStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{study_id}/researcher/{user_id}`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME2))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a researcher from a study.  Cannot remove the last researcher.
     * Remove a researcher from a study
     */
    async removeResearcherFromStudy(requestParameters: RemoveResearcherFromStudyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.removeResearcherFromStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Update a stage
     * Update a stage
     */
    async updateStageRaw(requestParameters: UpdateStageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling updateStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a stage
     * Update a stage
     */
    async updateStage(requestParameters: UpdateStageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateStageRaw(requestParameters, initOverrides);
    }

    /**
     * Update a study
     * Update a study
     */
    async updateStudyRaw(requestParameters: UpdateStudyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_PARAMETER_NAME === null || requestParameters.UNKNOWN_PARAMETER_NAME === undefined) {
            throw new runtime.RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter requestParameters.UNKNOWN_PARAMETER_NAME was null or undefined when calling updateStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.UNKNOWN_PARAMETER_NAME))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a study
     * Update a study
     */
    async updateStudy(requestParameters: UpdateStudyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateStudyRaw(requestParameters, initOverrides);
    }

}
