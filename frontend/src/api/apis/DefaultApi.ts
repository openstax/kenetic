/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax Kinetic API
 * The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAnalysis,
  AddBanner,
  AddResearcher,
  AddReward,
  AddStage,
  AddStudy,
  Analysis,
  AnalysisListing,
  BannerNotice,
  BannersListing,
  Environment,
  Launch,
  ParticipantStudies,
  ParticipantStudy,
  ParticipantStudyCompletion,
  Researcher,
  ResearchersList,
  Responses,
  Reward,
  RewardsListing,
  ServerError,
  Stage,
  Studies,
  Study,
  UpdateAnalysis,
  UpdateBanner,
  UpdatePreferences,
  UpdateResearcher,
  UpdateReward,
  UpdateStage,
  UpdateStudy,
  UserPreferences,
} from '../models';
import {
    AddAnalysisFromJSON,
    AddAnalysisToJSON,
    AddBannerFromJSON,
    AddBannerToJSON,
    AddResearcherFromJSON,
    AddResearcherToJSON,
    AddRewardFromJSON,
    AddRewardToJSON,
    AddStageFromJSON,
    AddStageToJSON,
    AddStudyFromJSON,
    AddStudyToJSON,
    AnalysisFromJSON,
    AnalysisToJSON,
    AnalysisListingFromJSON,
    AnalysisListingToJSON,
    BannerNoticeFromJSON,
    BannerNoticeToJSON,
    BannersListingFromJSON,
    BannersListingToJSON,
    EnvironmentFromJSON,
    EnvironmentToJSON,
    LaunchFromJSON,
    LaunchToJSON,
    ParticipantStudiesFromJSON,
    ParticipantStudiesToJSON,
    ParticipantStudyFromJSON,
    ParticipantStudyToJSON,
    ParticipantStudyCompletionFromJSON,
    ParticipantStudyCompletionToJSON,
    ResearcherFromJSON,
    ResearcherToJSON,
    ResearchersListFromJSON,
    ResearchersListToJSON,
    ResponsesFromJSON,
    ResponsesToJSON,
    RewardFromJSON,
    RewardToJSON,
    RewardsListingFromJSON,
    RewardsListingToJSON,
    ServerErrorFromJSON,
    ServerErrorToJSON,
    StageFromJSON,
    StageToJSON,
    StudiesFromJSON,
    StudiesToJSON,
    StudyFromJSON,
    StudyToJSON,
    UpdateAnalysisFromJSON,
    UpdateAnalysisToJSON,
    UpdateBannerFromJSON,
    UpdateBannerToJSON,
    UpdatePreferencesFromJSON,
    UpdatePreferencesToJSON,
    UpdateResearcherFromJSON,
    UpdateResearcherToJSON,
    UpdateRewardFromJSON,
    UpdateRewardToJSON,
    UpdateStageFromJSON,
    UpdateStageToJSON,
    UpdateStudyFromJSON,
    UpdateStudyToJSON,
    UserPreferencesFromJSON,
    UserPreferencesToJSON,
} from '../models';

export interface AddAnalysisRequest {
    addAnalysis: AddAnalysis;
}

export interface AddResearcherToStudyRequest {
    studyId: number;
    userId: string;
}

export interface AddStageRequest {
    studyId: number;
    addStage: AddStage;
}

export interface AddStudyRequest {
    addStudy?: AddStudy;
}

export interface CreateBannerRequest {
    addBanner: AddBanner;
}

export interface CreateResearcherRequest {
    addResearcher: AddResearcher;
}

export interface CreateRewardRequest {
    addReward: AddReward;
}

export interface DeleteBannerRequest {
    id: number;
}

export interface DeleteResearcherRequest {
    id: number;
}

export interface DeleteRewardRequest {
    id: number;
}

export interface DeleteStageRequest {
    id: number;
}

export interface DeleteStudyRequest {
    studyId: number;
}

export interface GetParticipantStudyRequest {
    id: number;
}

export interface GetResearcherRequest {
    id: number;
}

export interface GetResponseDownloadRequest {
    apiKey: string;
}

export interface GetResponseStatusRequest {
    apiKey: string;
}

export interface GetStageRequest {
    id: number;
}

export interface LandStudyRequest {
    id: number;
    aborted?: LandStudyAbortedEnum;
    consent?: boolean;
    md?: object;
}

export interface LaunchStudyRequest {
    id: number;
    preview?: boolean;
}

export interface RemoveResearcherFromStudyRequest {
    studyId: number;
    userId: string;
}

export interface UpdateAnalysisRequest {
    id: number;
    updateAnalysis?: UpdateAnalysis;
}

export interface UpdateBannerRequest {
    id: number;
    updateBanner: UpdateBanner;
}

export interface UpdatePreferencesRequest {
    updatePreferences: UpdatePreferences;
}

export interface UpdateResearcherRequest {
    id: number;
    updateResearcher: UpdateResearcher;
}

export interface UpdateRewardRequest {
    id: number;
    updateReward: UpdateReward;
}

export interface UpdateStageRequest {
    id: number;
    updateStage: UpdateStage;
}

export interface UpdateStudyRequest {
    id: number;
    updateStudy?: UpdateStudy;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Add an analysis
     */
    async addAnalysisRaw(requestParameters: AddAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Analysis>> {
        if (requestParameters.addAnalysis === null || requestParameters.addAnalysis === undefined) {
            throw new runtime.RequiredError('addAnalysis','Required parameter requestParameters.addAnalysis was null or undefined when calling addAnalysis.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researcher/analysis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAnalysisToJSON(requestParameters.addAnalysis),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisFromJSON(jsonValue));
    }

    /**
     * Add an analysis
     */
    async addAnalysis(requestParameters: AddAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Analysis> {
        const response = await this.addAnalysisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a researcher to a study
     * Add a researcher to a study
     */
    async addResearcherToStudyRaw(requestParameters: AddResearcherToStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.studyId === null || requestParameters.studyId === undefined) {
            throw new runtime.RequiredError('studyId','Required parameter requestParameters.studyId was null or undefined when calling addResearcherToStudy.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addResearcherToStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{study_id}/researcher/{user_id}`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.studyId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a researcher to a study
     * Add a researcher to a study
     */
    async addResearcherToStudy(requestParameters: AddResearcherToStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addResearcherToStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Add a stage to study
     * Add a stage to a study
     */
    async addStageRaw(requestParameters: AddStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.studyId === null || requestParameters.studyId === undefined) {
            throw new runtime.RequiredError('studyId','Required parameter requestParameters.studyId was null or undefined when calling addStage.');
        }

        if (requestParameters.addStage === null || requestParameters.addStage === undefined) {
            throw new runtime.RequiredError('addStage','Required parameter requestParameters.addStage was null or undefined when calling addStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researcher/studies/{study_id}/stages`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.studyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddStageToJSON(requestParameters.addStage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     * Add a stage to study
     * Add a stage to a study
     */
    async addStage(requestParameters: AddStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.addStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a study
     * Add a study
     */
    async addStudyRaw(requestParameters: AddStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Study>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researcher/studies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddStudyToJSON(requestParameters.addStudy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
    }

    /**
     * Add a study
     * Add a study
     */
    async addStudy(requestParameters: AddStudyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Study> {
        const response = await this.addStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a banner
     */
    async createBannerRaw(requestParameters: CreateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BannerNotice>> {
        if (requestParameters.addBanner === null || requestParameters.addBanner === undefined) {
            throw new runtime.RequiredError('addBanner','Required parameter requestParameters.addBanner was null or undefined when calling createBanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/banners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddBannerToJSON(requestParameters.addBanner),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerNoticeFromJSON(jsonValue));
    }

    /**
     * Add a banner
     */
    async createBanner(requestParameters: CreateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BannerNotice> {
        const response = await this.createBannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a researcher
     */
    async createResearcherRaw(requestParameters: CreateResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Researcher>> {
        if (requestParameters.addResearcher === null || requestParameters.addResearcher === undefined) {
            throw new runtime.RequiredError('addResearcher','Required parameter requestParameters.addResearcher was null or undefined when calling createResearcher.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researchers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddResearcherToJSON(requestParameters.addResearcher),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearcherFromJSON(jsonValue));
    }

    /**
     * Add a researcher
     */
    async createResearcher(requestParameters: CreateResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Researcher> {
        const response = await this.createResearcherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a reward
     */
    async createRewardRaw(requestParameters: CreateRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reward>> {
        if (requestParameters.addReward === null || requestParameters.addReward === undefined) {
            throw new runtime.RequiredError('addReward','Required parameter requestParameters.addReward was null or undefined when calling createReward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/rewards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRewardToJSON(requestParameters.addReward),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RewardFromJSON(jsonValue));
    }

    /**
     * Add a reward
     */
    async createReward(requestParameters: CreateRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reward> {
        const response = await this.createRewardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a banner
     */
    async deleteBannerRaw(requestParameters: DeleteBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a banner
     */
    async deleteBanner(requestParameters: DeleteBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBannerRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a researcher
     */
    async deleteResearcherRaw(requestParameters: DeleteResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteResearcher.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researchers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a researcher
     */
    async deleteResearcher(requestParameters: DeleteResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteResearcherRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a reward
     */
    async deleteRewardRaw(requestParameters: DeleteRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteReward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/rewards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a reward
     */
    async deleteReward(requestParameters: DeleteRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRewardRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a stage
     * Delete a stage
     */
    async deleteStageRaw(requestParameters: DeleteStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a stage
     * Delete a stage
     */
    async deleteStage(requestParameters: DeleteStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStageRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a study.  Cannot remove a study that has `first_lauched_at` set.
     * Deletes an unlaunched study
     */
    async deleteStudyRaw(requestParameters: DeleteStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.studyId === null || requestParameters.studyId === undefined) {
            throw new runtime.RequiredError('studyId','Required parameter requestParameters.studyId was null or undefined when calling deleteStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{study_id}`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.studyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a study.  Cannot remove a study that has `first_lauched_at` set.
     * Deletes an unlaunched study
     */
    async deleteStudy(requestParameters: DeleteStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Returns listing of all banners, expired or not 
     * Retrive list of all banners
     */
    async getBannersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BannersListing>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/banners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannersListingFromJSON(jsonValue));
    }

    /**
     * Returns listing of all banners, expired or not 
     * Retrive list of all banners
     */
    async getBanners(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BannersListing> {
        const response = await this.getBannersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get info about the deployment environment 
     * Get info about the deployment environment
     */
    async getEnvironmentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Environment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/environment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentFromJSON(jsonValue));
    }

    /**
     * Get info about the deployment environment 
     * Get info about the deployment environment
     */
    async getEnvironment(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Environment> {
        const response = await this.getEnvironmentRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies (available and completed) for the participant
     */
    async getParticipantStudiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantStudies>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantStudiesFromJSON(jsonValue));
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies (available and completed) for the participant
     */
    async getParticipantStudies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantStudies> {
        const response = await this.getParticipantStudiesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get participant-visible info for a study
     * Get participant-visible info for a study
     */
    async getParticipantStudyRaw(requestParameters: GetParticipantStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantStudy>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getParticipantStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantStudyFromJSON(jsonValue));
    }

    /**
     * Get participant-visible info for a study
     * Get participant-visible info for a study
     */
    async getParticipantStudy(requestParameters: GetParticipantStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantStudy> {
        const response = await this.getParticipantStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the preferences, will create a default set of prefences if the user not saved them previously 
     * Obtain the current users preferences
     */
    async getPreferencesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreferences>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/preferences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPreferencesFromJSON(jsonValue));
    }

    /**
     * Returns the preferences, will create a default set of prefences if the user not saved them previously 
     * Obtain the current users preferences
     */
    async getPreferences(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreferences> {
        const response = await this.getPreferencesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a researcher by an ID
     * Get researcher
     */
    async getResearcherRaw(requestParameters: GetResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Researcher>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getResearcher.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researchers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearcherFromJSON(jsonValue));
    }

    /**
     * Get a researcher by an ID
     * Get researcher
     */
    async getResearcher(requestParameters: GetResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Researcher> {
        const response = await this.getResearcherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns listing of all researchers
     * Retrieve list of all researchers
     */
    async getResearchersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResearchersList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researchers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchersListFromJSON(jsonValue));
    }

    /**
     * Returns listing of all researchers
     * Retrieve list of all researchers
     */
    async getResearchers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResearchersList> {
        const response = await this.getResearchersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Prepare response download
     */
    async getResponseDownloadRaw(requestParameters: GetResponseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Responses>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getResponseDownload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/responses/{api_key}/fetch`.replace(`{${"api_key"}}`, encodeURIComponent(String(requestParameters.apiKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesFromJSON(jsonValue));
    }

    /**
     * Prepare response download
     */
    async getResponseDownload(requestParameters: GetResponseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Responses> {
        const response = await this.getResponseDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrives the status of response download
     */
    async getResponseStatusRaw(requestParameters: GetResponseStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Responses>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getResponseStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/responses/{api_key}/status`.replace(`{${"api_key"}}`, encodeURIComponent(String(requestParameters.apiKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesFromJSON(jsonValue));
    }

    /**
     * Retrives the status of response download
     */
    async getResponseStatus(requestParameters: GetResponseStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Responses> {
        const response = await this.getResponseStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns listing of all rewards, expired or not 
     * Retrieve list of all rewards
     */
    async getRewardsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RewardsListing>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/rewards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RewardsListingFromJSON(jsonValue));
    }

    /**
     * Returns listing of all rewards, expired or not 
     * Retrieve list of all rewards
     */
    async getRewards(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RewardsListing> {
        const response = await this.getRewardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a stage
     * Get a stage
     */
    async getStageRaw(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     * Get a stage
     * Get a stage
     */
    async getStage(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.getStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies for the calling researcher
     */
    async getStudiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Studies>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudiesFromJSON(jsonValue));
    }

    /**
     * Get studies for the calling researcher. 
     * Get studies for the calling researcher
     */
    async getStudies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Studies> {
        const response = await this.getStudiesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Land a study stage
     * Land a study stage
     */
    async landStudyRaw(requestParameters: LandStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantStudyCompletion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling landStudy.');
        }

        const queryParameters: any = {};

        if (requestParameters.aborted !== undefined) {
            queryParameters['aborted'] = requestParameters.aborted;
        }

        if (requestParameters.consent !== undefined) {
            queryParameters['consent'] = requestParameters.consent;
        }

        if (requestParameters.md !== undefined) {
            queryParameters['md'] = requestParameters.md;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies/{id}/land`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantStudyCompletionFromJSON(jsonValue));
    }

    /**
     * Land a study stage
     * Land a study stage
     */
    async landStudy(requestParameters: LandStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantStudyCompletion> {
        const response = await this.landStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launch the next available study stage
     * Launch the next available study stage
     */
    async launchStudyRaw(requestParameters: LaunchStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Launch>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling launchStudy.');
        }

        const queryParameters: any = {};

        if (requestParameters.preview !== undefined) {
            queryParameters['preview'] = requestParameters.preview;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/studies/{id}/launch`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LaunchFromJSON(jsonValue));
    }

    /**
     * Launch the next available study stage
     * Launch the next available study stage
     */
    async launchStudy(requestParameters: LaunchStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Launch> {
        const response = await this.launchStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all analysis
     */
    async listAnalysisRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalysisListing>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/analysis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisListingFromJSON(jsonValue));
    }

    /**
     * Retrieve all analysis
     */
    async listAnalysis(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalysisListing> {
        const response = await this.listAnalysisRaw(initOverrides);
        return await response.value();
    }

    /**
     * Remove a researcher from a study.  Cannot remove the last researcher.
     * Remove a researcher from a study
     */
    async removeResearcherFromStudyRaw(requestParameters: RemoveResearcherFromStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.studyId === null || requestParameters.studyId === undefined) {
            throw new runtime.RequiredError('studyId','Required parameter requestParameters.studyId was null or undefined when calling removeResearcherFromStudy.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeResearcherFromStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/researcher/studies/{study_id}/researcher/{user_id}`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.studyId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a researcher from a study.  Cannot remove the last researcher.
     * Remove a researcher from a study
     */
    async removeResearcherFromStudy(requestParameters: RemoveResearcherFromStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeResearcherFromStudyRaw(requestParameters, initOverrides);
    }

    /**
     * Update a analysis
     * Update a analysis
     */
    async updateAnalysisRaw(requestParameters: UpdateAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Analysis>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAnalysis.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researcher/analysis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAnalysisToJSON(requestParameters.updateAnalysis),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisFromJSON(jsonValue));
    }

    /**
     * Update a analysis
     * Update a analysis
     */
    async updateAnalysis(requestParameters: UpdateAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Analysis> {
        const response = await this.updateAnalysisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a banner
     */
    async updateBannerRaw(requestParameters: UpdateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BannerNotice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBanner.');
        }

        if (requestParameters.updateBanner === null || requestParameters.updateBanner === undefined) {
            throw new runtime.RequiredError('updateBanner','Required parameter requestParameters.updateBanner was null or undefined when calling updateBanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBannerToJSON(requestParameters.updateBanner),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerNoticeFromJSON(jsonValue));
    }

    /**
     * Update a banner
     */
    async updateBanner(requestParameters: UpdateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BannerNotice> {
        const response = await this.updateBannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update the users preferences
     */
    async updatePreferencesRaw(requestParameters: UpdatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreferences>> {
        if (requestParameters.updatePreferences === null || requestParameters.updatePreferences === undefined) {
            throw new runtime.RequiredError('updatePreferences','Required parameter requestParameters.updatePreferences was null or undefined when calling updatePreferences.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePreferencesToJSON(requestParameters.updatePreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPreferencesFromJSON(jsonValue));
    }

    /**
     * Create or update the users preferences
     */
    async updatePreferences(requestParameters: UpdatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreferences> {
        const response = await this.updatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a researcher
     */
    async updateResearcherRaw(requestParameters: UpdateResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Researcher>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateResearcher.');
        }

        if (requestParameters.updateResearcher === null || requestParameters.updateResearcher === undefined) {
            throw new runtime.RequiredError('updateResearcher','Required parameter requestParameters.updateResearcher was null or undefined when calling updateResearcher.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researchers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateResearcherToJSON(requestParameters.updateResearcher),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearcherFromJSON(jsonValue));
    }

    /**
     * Update a researcher
     */
    async updateResearcher(requestParameters: UpdateResearcherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Researcher> {
        const response = await this.updateResearcherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a reward
     */
    async updateRewardRaw(requestParameters: UpdateRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reward>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateReward.');
        }

        if (requestParameters.updateReward === null || requestParameters.updateReward === undefined) {
            throw new runtime.RequiredError('updateReward','Required parameter requestParameters.updateReward was null or undefined when calling updateReward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/rewards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRewardToJSON(requestParameters.updateReward),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RewardFromJSON(jsonValue));
    }

    /**
     * Update a reward
     */
    async updateReward(requestParameters: UpdateRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reward> {
        const response = await this.updateRewardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a stage
     * Update a stage
     */
    async updateStageRaw(requestParameters: UpdateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStage.');
        }

        if (requestParameters.updateStage === null || requestParameters.updateStage === undefined) {
            throw new runtime.RequiredError('updateStage','Required parameter requestParameters.updateStage was null or undefined when calling updateStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researcher/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStageToJSON(requestParameters.updateStage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     * Update a stage
     * Update a stage
     */
    async updateStage(requestParameters: UpdateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.updateStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a study
     * Update a study
     */
    async updateStudyRaw(requestParameters: UpdateStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Study>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStudy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/researcher/studies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStudyToJSON(requestParameters.updateStudy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
    }

    /**
     * Update a study
     * Update a study
     */
    async updateStudy(requestParameters: UpdateStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Study> {
        const response = await this.updateStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const LandStudyAbortedEnum = {
    Refusedconsent: 'refusedconsent'
} as const;
export type LandStudyAbortedEnum = typeof LandStudyAbortedEnum[keyof typeof LandStudyAbortedEnum];
