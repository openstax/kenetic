/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax Kinetic API
 * The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AnalysisResearcher } from './AnalysisResearcher';
import {
    AnalysisResearcherFromJSON,
    AnalysisResearcherFromJSONTyped,
    AnalysisResearcherToJSON,
} from './AnalysisResearcher';
import type { StudyAnalysis } from './StudyAnalysis';
import {
    StudyAnalysisFromJSON,
    StudyAnalysisFromJSONTyped,
    StudyAnalysisToJSON,
} from './StudyAnalysis';

/**
 * 
 * @export
 * @interface AnalysisUpdate
 */
export interface AnalysisUpdate {
    /**
     * ID of analysis
     * @type {number}
     * @memberof AnalysisUpdate
     */
    readonly id?: number;
    /**
     * Title of analysis
     * @type {string}
     * @memberof AnalysisUpdate
     */
    title?: string;
    /**
     * Long description of what analysis will perform
     * @type {string}
     * @memberof AnalysisUpdate
     */
    description?: string;
    /**
     * URL to repository containing source code
     * @type {string}
     * @memberof AnalysisUpdate
     */
    repositoryUrl?: string;
    /**
     * Api Key of analysis
     * @type {string}
     * @memberof AnalysisUpdate
     */
    apiKey?: string;
    /**
     * The researchers working with the analysis.
     * @type {Array<AnalysisResearcher>}
     * @memberof AnalysisUpdate
     */
    researchers?: Array<AnalysisResearcher>;
    /**
     * The study ids that the analysis reads from.
     * @type {Array<number>}
     * @memberof AnalysisUpdate
     */
    studyIds?: Array<number>;
    /**
     * The studies that the analysis reads from.
     * @type {Array<StudyAnalysis>}
     * @memberof AnalysisUpdate
     */
    studies?: Array<StudyAnalysis>;
}

/**
 * Check if a given object implements the AnalysisUpdate interface.
 */
export function instanceOfAnalysisUpdate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AnalysisUpdateFromJSON(json: any): AnalysisUpdate {
    return AnalysisUpdateFromJSONTyped(json, false);
}

export function AnalysisUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalysisUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'repositoryUrl': !exists(json, 'repository_url') ? undefined : json['repository_url'],
        'apiKey': !exists(json, 'api_key') ? undefined : json['api_key'],
        'researchers': !exists(json, 'researchers') ? undefined : ((json['researchers'] as Array<any>).map(AnalysisResearcherFromJSON)),
        'studyIds': !exists(json, 'study_ids') ? undefined : json['study_ids'],
        'studies': !exists(json, 'studies') ? undefined : ((json['studies'] as Array<any>).map(StudyAnalysisFromJSON)),
    };
}

export function AnalysisUpdateToJSON(value?: AnalysisUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'repository_url': value.repositoryUrl,
        'api_key': value.apiKey,
        'researchers': value.researchers === undefined ? undefined : ((value.researchers as Array<any>).map(AnalysisResearcherToJSON)),
        'study_ids': value.studyIds,
        'studies': value.studies === undefined ? undefined : ((value.studies as Array<any>).map(StudyAnalysisToJSON)),
    };
}

