/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax Kinetic API
 * The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StudyUpdate
 */
export interface StudyUpdate {
    /**
     * The study ID.
     * @type {number}
     * @memberof StudyUpdate
     */
    readonly id?: number;
    /**
     * The study name that participants see.
     * @type {string}
     * @memberof StudyUpdate
     */
    titleForParticipants?: string;
    /**
     * The study name that only researchers see.
     * @type {string}
     * @memberof StudyUpdate
     */
    titleForResearchers?: string;
    /**
     * A short study description.
     * @type {string}
     * @memberof StudyUpdate
     */
    shortDescription?: string;
    /**
     * A long study description.
     * @type {string}
     * @memberof StudyUpdate
     */
    longDescription?: string;
    /**
     * The tags of the study object, used for grouping and filtering.
     * @type {Array<string>}
     * @memberof StudyUpdate
     */
    tags?: Array<string>;
    /**
     * Description of feedback displayed to the user upon study completion
     * @type {string}
     * @memberof StudyUpdate
     */
    feedbackDescription?: string;
    /**
     * Freeform id of image that should be displayed on study card
     * @type {string}
     * @memberof StudyUpdate
     */
    imageId?: string;
    /**
     * Description of how the study benefits participants
     * @type {string}
     * @memberof StudyUpdate
     */
    benefits?: string;
    /**
     * Is the study hidden from participants
     * @type {boolean}
     * @memberof StudyUpdate
     */
    isHidden?: boolean;
    /**
     * When the study opens for participation; null means not open.
     * @type {Date}
     * @memberof StudyUpdate
     */
    opensAt?: Date | null;
    /**
     * When the study closes for participation; null means does not close.
     * @type {Date}
     * @memberof StudyUpdate
     */
    closesAt?: Date | null;
    /**
     * Mandatory studies must be completed by all users
     * @type {boolean}
     * @memberof StudyUpdate
     */
    isMandatory?: boolean;
    /**
     * Number of times this study has been completed
     * @type {number}
     * @memberof StudyUpdate
     */
    readonly completedCount?: number;
    /**
     * Desired sample size set by researcher
     * @type {number}
     * @memberof StudyUpdate
     */
    targetSampleSize?: number;
    /**
     * How many times the study has been viewed
     * @type {number}
     * @memberof StudyUpdate
     */
    viewCount?: number;
    /**
     * How many times the study has been launched
     * @type {number}
     * @memberof StudyUpdate
     */
    readonly launchedCount?: number;
    /**
     * Status of the study
     * @type {string}
     * @memberof StudyUpdate
     */
    status?: StudyUpdateStatusEnum;
}


/**
 * @export
 */
export const StudyUpdateStatusEnum = {
    Active: 'active',
    Paused: 'paused',
    Scheduled: 'scheduled',
    Draft: 'draft',
    Completed: 'completed'
} as const;
export type StudyUpdateStatusEnum = typeof StudyUpdateStatusEnum[keyof typeof StudyUpdateStatusEnum];


/**
 * Check if a given object implements the StudyUpdate interface.
 */
export function instanceOfStudyUpdate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StudyUpdateFromJSON(json: any): StudyUpdate {
    return StudyUpdateFromJSONTyped(json, false);
}

export function StudyUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): StudyUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'titleForParticipants': !exists(json, 'title_for_participants') ? undefined : json['title_for_participants'],
        'titleForResearchers': !exists(json, 'title_for_researchers') ? undefined : json['title_for_researchers'],
        'shortDescription': !exists(json, 'short_description') ? undefined : json['short_description'],
        'longDescription': !exists(json, 'long_description') ? undefined : json['long_description'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'feedbackDescription': !exists(json, 'feedback_description') ? undefined : json['feedback_description'],
        'imageId': !exists(json, 'image_id') ? undefined : json['image_id'],
        'benefits': !exists(json, 'benefits') ? undefined : json['benefits'],
        'isHidden': !exists(json, 'is_hidden') ? undefined : json['is_hidden'],
        'opensAt': !exists(json, 'opens_at') ? undefined : (json['opens_at'] === null ? null : new Date(json['opens_at'])),
        'closesAt': !exists(json, 'closes_at') ? undefined : (json['closes_at'] === null ? null : new Date(json['closes_at'])),
        'isMandatory': !exists(json, 'is_mandatory') ? undefined : json['is_mandatory'],
        'completedCount': !exists(json, 'completed_count') ? undefined : json['completed_count'],
        'targetSampleSize': !exists(json, 'target_sample_size') ? undefined : json['target_sample_size'],
        'viewCount': !exists(json, 'view_count') ? undefined : json['view_count'],
        'launchedCount': !exists(json, 'launched_count') ? undefined : json['launched_count'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function StudyUpdateToJSON(value?: StudyUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title_for_participants': value.titleForParticipants,
        'title_for_researchers': value.titleForResearchers,
        'short_description': value.shortDescription,
        'long_description': value.longDescription,
        'tags': value.tags,
        'feedback_description': value.feedbackDescription,
        'image_id': value.imageId,
        'benefits': value.benefits,
        'is_hidden': value.isHidden,
        'opens_at': value.opensAt === undefined ? undefined : (value.opensAt === null ? null : value.opensAt.toISOString()),
        'closes_at': value.closesAt === undefined ? undefined : (value.closesAt === null ? null : value.closesAt.toISOString()),
        'is_mandatory': value.isMandatory,
        'target_sample_size': value.targetSampleSize,
        'view_count': value.viewCount,
        'status': value.status,
    };
}

