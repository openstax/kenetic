/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax Kinetic API
 * The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DevUser } from './DevUser';
import {
    DevUserFromJSON,
    DevUserFromJSONTyped,
    DevUserToJSON,
} from './DevUser';

/**
 * 
 * @export
 * @interface DevUsers
 */
export interface DevUsers {
    /**
     * The researchers.
     * @type {Array<DevUser>}
     * @memberof DevUsers
     */
    researchers?: Array<DevUser>;
    /**
     * The admins.
     * @type {Array<DevUser>}
     * @memberof DevUsers
     */
    admins?: Array<DevUser>;
    /**
     * The users.
     * @type {Array<DevUser>}
     * @memberof DevUsers
     */
    users?: Array<DevUser>;
}

/**
 * Check if a given object implements the DevUsers interface.
 */
export function instanceOfDevUsers(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DevUsersFromJSON(json: any): DevUsers {
    return DevUsersFromJSONTyped(json, false);
}

export function DevUsersFromJSONTyped(json: any, ignoreDiscriminator: boolean): DevUsers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'researchers': !exists(json, 'researchers') ? undefined : ((json['researchers'] as Array<any>).map(DevUserFromJSON)),
        'admins': !exists(json, 'admins') ? undefined : ((json['admins'] as Array<any>).map(DevUserFromJSON)),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(DevUserFromJSON)),
    };
}

export function DevUsersToJSON(value?: DevUsers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'researchers': value.researchers === undefined ? undefined : ((value.researchers as Array<any>).map(DevUserToJSON)),
        'admins': value.admins === undefined ? undefined : ((value.admins as Array<any>).map(DevUserToJSON)),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(DevUserToJSON)),
    };
}

