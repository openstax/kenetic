/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax Kinetic API
 * The Kinetic API for OpenStax.  Requests to this API should include `application/json` in the `Accept` header.  The desired API version is specified in the request URL, e.g. `[domain]/api/v1/researcher/studies`. While the API does support a default version, that version will change over time and therefore should not be used in production code! 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * The Responses download ID.
     * @type {number}
     * @memberof Response
     */
    readonly id: number;
    /**
     * The ID of the stage
     * @type {number}
     * @memberof Response
     */
    readonly stageId?: number;
    /**
     * Metadata related to the responses
     * @type {object}
     * @memberof Response
     */
    metadata?: object;
    /**
     * URL(s) to download study responses from
     * @type {Array<string>}
     * @memberof Response
     */
    responseUrls?: Array<string>;
}

/**
 * Check if a given object implements the Response interface.
 */
export function instanceOfResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function ResponseFromJSON(json: any): Response {
    return ResponseFromJSONTyped(json, false);
}

export function ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'stageId': !exists(json, 'stage_id') ? undefined : json['stage_id'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'responseUrls': !exists(json, 'response_urls') ? undefined : json['response_urls'],
    };
}

export function ResponseToJSON(value?: Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': value.metadata,
        'response_urls': value.responseUrls,
    };
}

